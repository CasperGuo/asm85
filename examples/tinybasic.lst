asm85 8085 Assembler by nib

                     1: ;*************************************************************
                     2: ; 
                     3: ;                 TINY BASIC FOR INTEL 8080
                     4: ;                       VERSION 2.0
                     5: ;                     BY LI-CHEN WANG
                     6: ;                  MODIFIED AND TRANSLATED
                     7: ;                    TO INTEL MNEMONICS
                     8: ;                     BY ROGER RAUSKOLB
                     9: ;                      10 OCTOBER,1976
                    10: ;                        @COPYLEFT
                    11: ;                   ALL WRONGS RESERVED
                    12: ; 
                    13: ;*************************************************************
                    14: ; 
                    15: ; *** ZERO PAGE SUBROUTINES ***
                    16: ; 
                    17: ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
                    18: ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
                    19: ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
                    20: ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
                    21: ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
                    22: ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
                    23: ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
                    24: ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
                    25: ; 
                    26: 
(0000)              27:         ORG  0H
0000 31 00 c0       28: START:  LXI  SP,STACK                   ;*** COLD START ***
0003 3e ff          29:         MVI  A,0FFH
0005 c3 42 06       30:         JMP  INIT
                    31: ;
0008 e3             32:         XTHL                            ;*** TSTC OR RST 1 ***
0009 ef             33:         RST  5                          ;IGNORE BLANKS AND
000a be             34:         CMP  M                          ;TEST CHARACTER
000b c3 68 00       35:         JMP  TC1                        ;REST OF THIS IS AT TC1
                    36: ;
000e 3e 0d          37: CRLF:   MVI  A,CR                       ;*** CRLF ***
                    38: ;
0010 f5             39:         PUSH PSW                        ;*** OUTC OR RST 2 ***
0011 3a 00 20       40:         LDA  OCSW                       ;PRINT CHARACTER ONLY
0014 b7             41:         ORA  A                          ;IF OCSW SWITCH IS ON
0015 c3 64 06       42:         JMP  OC2                        ;REST OF THIS IS AT OC2
                    43: ;
0018 cd 71 03       44:         CALL EXPR2                      ;*** EXPR OR RST 3 ***
001b e5             45:         PUSH H                          ;EVALUATE AN EXPRESSION
001c c3 2d 03       46:         JMP  EXPR1                      ;REST OF IT AT EXPR1
001f 57             47:         DB   'W'
                    48: ;
0020 7c             49:         MOV  A,H                        ;*** COMP OR RST 4 ***
0021 ba             50:         CMP  D                          ;COMPARE HL WITH DE
0022 c0             51:         RNZ                             ;RETURN CORRECT C AND
0023 7d             52:         MOV  A,L                        ;Z FLAGS
0024 bb             53:         CMP  E                          ;BUT OLD A IS LOST
0025 c9             54:         RET
0026 41 4e          55:         DB   'AN'
                    56: ;
0028 1a             57: SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
0029 fe 20          58:         CPI  20H                        ;IGNORE BLANKS
002b c0             59:         RNZ                             ;IN TEXT (WHERE DE->)
002c 13             60:         INX  D                          ;AND RETURN THE FIRST
002d c3 28 00       61:         JMP  SS1                        ;NON-BLANK CHAR. IN A
                    62: ;
0030 f1             63:         POP  PSW                        ;*** FINISH/RST 6 ***
0031 cd b3 04       64:         CALL FIN                        ;CHECK END OF COMMAND
0034 c3 c6 04       65:         JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0037 47             66:         DB   'G'
                    67: ;
0038 ef             68:         RST  5                          ;*** TSTV OR RST 7 ***
0039 d6 40          69:         SUI  40H                        ;TEST VARIABLES
003b d8             70:         RC                              ;C:NOT A VARIABLE
003c c2 58 00       71:         JNZ  TV1                        ;NOT "@" ARRAY
003f 13             72:         INX  D                          ;IT IS THE "@" ARRAY
0040 cd 1a 04       73:         CALL PARN                       ;@ SHOULD BE FOLLOWED
0043 29             74:         DAD  H                          ;BY (EXPR) AS ITS INDEX
0044 da 9f 00       75:         JC   QHOW                       ;IS INDEX TOO BIG?
0047 d5             76:         PUSH D                          ;WILL IT OVERWRITE
0048 eb             77:         XCHG                            ;TEXT?
0049 cd 59 04       78:         CALL SIZE                       ;FIND SIZE OF FREE
004c e7             79:         RST  4                          ;AND CHECK THAT
004d da f4 04       80:         JC   ASORRY                     ;IF SO, SAY "SORRY"
0050 21 87 3f       81:         LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0053 cd 7c 04       82:         CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0056 d1             83:         POP  D                          ;IN HL
0057 c9             84:         RET                             ;C FLAG IS CLEARED
0058 fe 1b          85: TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
005a 3f             86:         CMC                             ;IF NOT RETURN C FLAG
005b d8             87:         RC
005c 13             88:         INX  D                          ;IF A THROUGH Z
005d 21 87 3f       89:         LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0060 07             90:         RLC                             ;THAT VARIABLE
0061 85             91:         ADD  L                          ;AND RETURN IT IN HL
0062 6f             92:         MOV  L,A                        ;WITH C FLAG CLEARED
0063 3e 00          93:         MVI  A,0
0065 8c             94:         ADC  H
0066 67             95:         MOV  H,A
0067 c9             96:         RET
                    97: ;
                    98: ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
                    99: ;       RST  5                          ;THIS IS AT LOC. 8
                   100: ;       CMP  M                          ;AND THEN JUMP HERE
0068 23            101: TC1:    INX  H                          ;COMPARE THE BYTE THAT
0069 ca 73 00      102:         JZ   TC2                        ;FOLLOWS THE RST INST.
006c c5            103:         PUSH B                          ;WITH THE TEXT (DE->)
006d 4e            104:         MOV  C,M                        ;IF NOT =, ADD THE 2ND
006e 06 00         105:         MVI  B,0                        ;BYTE THAT FOLLOWS THE
0070 09            106:         DAD  B                          ;RST TO THE OLD PC
0071 c1            107:         POP  B                          ;I.E., DO A RELATIVE
0072 1b            108:         DCX  D                          ;JUMP IF NOT =
0073 13            109: TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0074 23            110:         INX  H                          ;AND CONTINUE
0075 e3            111:         XTHL
0076 c9            112:         RET
                   113: ;
0077 21 00 00      114: TSTNUM: LXI  H,0                        ;*** TSTNUM ***
007a 44            115:         MOV  B,H                        ;TEST IF THE TEXT IS
007b ef            116:         RST  5                          ;A NUMBER
007c fe 30         117: TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
007e d8            118:         RC                              ;B AND HL
007f fe 3a         119:         CPI  3AH                        ;IF NUMBERS, CONVERT
0081 d0            120:         RNC                             ;TO BINARY IN HL AND
0082 3e f0         121:         MVI  A,0F0H                     ;SET B TO # OF DIGITS
0084 a4            122:         ANA  H                          ;IF H>255, THERE IS NO
0085 c2 9f 00      123:         JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0088 04            124:         INR  B                          ;B COUNTS # OF DIGITS
0089 c5            125:         PUSH B
008a 44            126:         MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
008b 4d            127:         MOV  C,L
008c 29            128:         DAD  H                          ;WHERE 10* IS DONE BY
008d 29            129:         DAD  H                          ;SHIFT AND ADD
008e 09            130:         DAD  B
008f 29            131:         DAD  H
0090 1a            132:         LDAX D                          ;AND (DIGIT) IS FROM
0091 13            133:         INX  D                          ;STRIPPING THE ASCII
0092 e6 0f         134:         ANI  0FH                        ;CODE
0094 85            135:         ADD  L
0095 6f            136:         MOV  L,A
0096 3e 00         137:         MVI  A,0
0098 8c            138:         ADC  H
0099 67            139:         MOV  H,A
009a c1            140:         POP  B
009b 1a            141:         LDAX D                          ;DO THIS DIGIT AFTER
009c f2 7c 00      142:         JP   TN1                        ;DIGIT. S SAYS OVERFLOW
009f d5            143: QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
00a0 11 a6 00      144: AHOW:   LXI  D,HOW
00a3 c3 ca 04      145:         JMP  ERROR
00a6 48 4f 57 3f   146: HOW:    DB   'HOW?'
00aa 0d            147:         DB   CR
00ab 4f 4b         148: OK:     DB   'OK'
00ad 0d            149:         DB   CR
00ae 57 48 41 54   150: WHAT:   DB   'WHAT?'
     3f 
00b3 0d            151:         DB   CR
00b4 53 4f 52 52   152: SORRY:  DB   'SORRY'
     59 
00b9 0d            153:         DB   CR
                   154: ;
                   155: ;*************************************************************
                   156: ;
                   157: ; *** MAIN ***
                   158: ;
                   159: ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
                   160: ; AND STORES IT IN THE MEMORY.
                   161: ;
                   162: ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
                   163: ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
                   164: ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
                   165: ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
                   166: ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
                   167: ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
                   168: ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
                   169: ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
                   170: ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
                   171: ;
                   172: ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
                   173: ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
                   174: ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
                   175: ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
                   176: ;
                   177: ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
                   178: ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
                   179: ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
                   180: ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
                   181: ;
                   182: ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
                   183: ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
                   184: ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
                   185: ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
                   186: ;
00ba 31 00 c0      187: RSTART: LXI  SP,STACK
00bd cd 0e 00      188: ST1:    CALL CRLF                       ;AND JUMP TO HERE
00c0 11 ab 00      189:         LXI  D,OK                       ;DE->STRING
00c3 97            190:         SUB  A                          ;A=0
00c4 cd 60 05      191:         CALL PRTSTG                     ;PRINT STRING UNTIL CR
00c7 21 ce 00      192:         LXI  H,ST2+1                    ;LITERAL 0
00ca 22 01 20      193:         SHLD CURRNT                     ;CURRENT->LINE # = 0
00cd 21 00 00      194: ST2:    LXI  H,0
00d0 22 09 20      195:         SHLD LOPVAR
00d3 22 03 20      196:         SHLD STKGOS
00d6 3e 3e         197: ST3:    MVI  A,3EH                      ;PROMPT '>' AND
00d8 cd fa 04      198:         CALL GETLN                      ;READ A LINE
00db d5            199:         PUSH D                          ;DE->END OF LINE
00dc 11 be 3f      200:         LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
00df cd 77 00      201:         CALL TSTNUM                     ;TEST IF IT IS A NUMBER
00e2 ef            202:         RST  5
00e3 7c            203:         MOV  A,H                        ;HL=VALUE OF THE # OR
00e4 b5            204:         ORA  L                          ;0 IF NO # WAS FOUND
00e5 c1            205:         POP  B                          ;BC->END OF LINE
00e6 ca 2c 07      206:         JZ   DIRECT
00e9 1b            207:         DCX  D                          ;BACKUP DE AND SAVE
00ea 7c            208:         MOV  A,H                        ;VALUE OF LINE # THERE
00eb 12            209:         STAX D
00ec 1b            210:         DCX  D
00ed 7d            211:         MOV  A,L
00ee 12            212:         STAX D
00ef c5            213:         PUSH B                          ;BC,DE->BEGIN, END
00f0 d5            214:         PUSH D
00f1 79            215:         MOV  A,C
00f2 93            216:         SUB  E
00f3 f5            217:         PUSH PSW                        ;A=# OF BYTES IN LINE
00f4 cd 38 05      218:         CALL FNDLN                      ;FIND THIS LINE IN SAVE
00f7 d5            219:         PUSH D                          ;AREA, DE->SAVE AREA
00f8 c2 0b 01      220:         JNZ  ST4                        ;NZ:NOT FOUND, INSERT
00fb d5            221:         PUSH D                          ;Z:FOUND, DELETE IT
00fc cd 54 05      222:         CALL FNDNXT                     ;FIND NEXT LINE
                   223:                                         ;DE->NEXT LINE
00ff c1            224:         POP  B                          ;BC->LINE TO BE DELETED
0100 2a 15 20      225:         LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0103 cd e5 05      226:         CALL MVUP                       ;MOVE UP TO DELETE
0106 60            227:         MOV  H,B                        ;TXTUNF->UNFILLED AREA
0107 69            228:         MOV  L,C
0108 22 15 20      229:         SHLD TXTUNF                     ;UPDATE
010b c1            230: ST4:    POP  B                          ;GET READY TO INSERT
010c 2a 15 20      231:         LHLD TXTUNF                     ;BUT FIRST CHECK IF
010f f1            232:         POP  PSW                        ;THE LENGTH OF NEW LINE
0110 e5            233:         PUSH H                          ;IS 3 (LINE # AND CR)
0111 fe 03         234:         CPI  3                          ;THEN DO NOT INSERT
0113 ca ba 00      235:         JZ   RSTART                     ;MUST CLEAR THE STACK
0116 85            236:         ADD  L                          ;COMPUTE NEW TXTUNF
0117 6f            237:         MOV  L,A
0118 3e 00         238:         MVI  A,0
011a 8c            239:         ADC  H
011b 67            240:         MOV  H,A                        ;HL->NEW UNFILLED AREA
011c 11 87 3f      241:         LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
011f e7            242:         RST  4                          ;IS ENOUGH SPACE
0120 d2 f3 04      243:         JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0123 22 15 20      244:         SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0126 d1            245:         POP  D                          ;DE->OLD UNFILLED AREA
0127 cd ee 05      246:         CALL MVDOWN
012a d1            247:         POP  D                          ;DE->BEGIN, HL->END
012b e1            248:         POP  H
012c cd e5 05      249:         CALL MVUP                       ;MOVE NEW LINE TO SAVE
012f c3 d6 00      250:         JMP  ST3                        ;AREA
                   251: ;
                   252: ;*************************************************************
                   253: ;
                   254: ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
                   255: ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
                   256: ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
                   257: ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
                   258: ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
                   259: ;
                   260: ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
                   261: ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
                   262: ; GO BACK TO 'RSTART'.
                   263: ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
                   264: ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
                   265: ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
                   266: ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
                   267: ;*************************************************************
                   268: ;
                   269: ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
                   270: ;
                   271: ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
                   272: ;
                   273: ; 'STOP(CR)' GOES BACK TO 'RSTART'
                   274: ;
                   275: ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
                   276: ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
                   277: ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
                   278: ;
                   279: ; THERE ARE 3 MORE ENTRIES IN 'RUN':
                   280: ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
                   281: ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
                   282: ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
                   283: ;
                   284: ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
                   285: ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
                   286: ;
0132 cd c2 04      287: NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0135 21 17 20      288:         LXI  H,TXTBGN
0138 22 15 20      289:         SHLD TXTUNF
                   290: ;
013b cd c2 04      291: STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
013e c3 ba 00      292:         JMP  RSTART
                   293: ;
0141 cd c2 04      294: RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0144 11 17 20      295:         LXI  D,TXTBGN                   ;FIRST SAVED LINE
                   296: ;
0147 21 00 00      297: RUNNXL: LXI  H,0                        ;*** RUNNXL ***
014a cd 40 05      298:         CALL FNDLP                      ;FIND WHATEVER LINE #
014d da ba 00      299:         JC   RSTART                     ;C:PASSED TXTUNF, QUIT
                   300: ;
0150 eb            301: RUNTSL: XCHG                            ;*** RUNTSL ***
0151 22 01 20      302:         SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0154 eb            303:         XCHG
0155 13            304:         INX  D                          ;BUMP PASS LINE #
0156 13            305:         INX  D
                   306: ;
0157 cd 76 06      307: RUNSML: CALL CHKIO                      ;*** RUNSML ***
015a 21 b1 06      308:         LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
015d c3 2f 07      309:         JMP  EXEC                       ;AND EXECUTE IT
                   310: ;
0160 df            311: GOTO:   RST  3                          ;*** GOTO EXPR ***
0161 d5            312:         PUSH D                          ;SAVE FOR ERROR ROUTINE
0162 cd c2 04      313:         CALL ENDCHK                     ;MUST FIND A CR
0165 cd 38 05      314:         CALL FNDLN                      ;FIND THE TARGET LINE
0168 c2 a0 00      315:         JNZ  AHOW                       ;NO SUCH LINE #
016b f1            316:         POP  PSW                        ;CLEAR THE PUSH DE
016c c3 50 01      317:         JMP  RUNTSL                     ;GO DO IT
                   318: ;
                   319: ;*************************************************************
                   320: ;
                   321: ; *** LIST *** & PRINT ***
                   322: ;
                   323: ; LIST HAS TWO FORMS:
                   324: ; 'LIST(CR)' LISTS ALL SAVED LINES
                   325: ; 'LIST #(CR)' START LIST AT THIS LINE #
                   326: ; YOU CAN STOP THE LISTING BY CONTROL C KEY
                   327: ;
                   328: ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
                   329: ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
                   330: ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
                   331: ;
                   332: ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
                   333: ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
                   334: ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
                   335: ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
                   336: ; SPECIFIED, 6 POSITIONS WILL BE USED.
                   337: ;
                   338: ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
                   339: ; DOUBLE QUOTES.
                   340: ;
                   341: ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
                   342: ;
                   343: ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
                   344: ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
                   345: ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
                   346: ;
016f cd 77 00      347: LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0172 cd c2 04      348:         CALL ENDCHK                     ;IF NO # WE GET A 0
0175 cd 38 05      349:         CALL FNDLN                      ;FIND THIS OR NEXT LINE
0178 da ba 00      350: LS1:    JC   RSTART                     ;C:PASSED TXTUNF
017b cd d2 05      351:         CALL PRTLN                      ;PRINT THE LINE
017e cd 76 06      352:         CALL CHKIO                      ;STOP IF HIT CONTROL-C
0181 cd 40 05      353:         CALL FNDLP                      ;FIND NEXT LINE
0184 c3 78 01      354:         JMP  LS1                        ;AND LOOP BACK
                   355: ;
0187 0e 06         356: PRINT:  MVI  C,6                        ;C = # OF SPACES
0189 cf            357:         RST  1                          ;IF NULL LIST & ";"
018a 3b            358:         DB   3BH
018b 06            359:         DB   PR2-$-1
018c cd 0e 00      360:         CALL CRLF                       ;GIVE CR-LF AND
018f c3 57 01      361:         JMP  RUNSML                     ;CONTINUE SAME LINE
0192 cf            362: PR2:    RST  1                          ;IF NULL LIST (CR)
0193 0d            363:         DB   CR
0194 06            364:         DB   PR0-$-1
0195 cd 0e 00      365:         CALL CRLF                       ;ALSO GIVE CR-LF AND
0198 c3 47 01      366:         JMP  RUNNXL                     ;GO TO NEXT LINE
019b cf            367: PR0:    RST  1                          ;ELSE IS IT FORMAT?
019c 23            368:         DB   '#'
019d 05            369:         DB   PR1-$-1
019e df            370:         RST  3                          ;YES, EVALUATE EXPR.
019f 4d            371:         MOV  C,L                        ;AND SAVE IT IN C
01a0 c3 a9 01      372:         JMP  PR3                        ;LOOK FOR MORE TO PRINT
01a3 cd 6c 05      373: PR1:    CALL QTSTG                      ;OR IS IT A STRING?
01a6 c3 b6 01      374:         JMP  PR8                        ;IF NOT, MUST BE EXPR.
01a9 cf            375: PR3:    RST  1                          ;IF ",", GO FIND NEXT
01aa 2c            376:         DB   ','
01ab 06            377:         DB   PR6-$-1
01ac cd b3 04      378:         CALL FIN                        ;IN THE LIST.
01af c3 9b 01      379:         JMP  PR0                        ;LIST CONTINUES
01b2 cd 0e 00      380: PR6:    CALL CRLF                       ;LIST ENDS
01b5 f7            381:         RST  6
01b6 df            382: PR8:    RST  3                          ;EVALUATE THE EXPR
01b7 c5            383:         PUSH B
01b8 cd 92 05      384:         CALL PRTNUM                     ;PRINT THE VALUE
01bb c1            385:         POP  B
01bc c3 a9 01      386:         JMP  PR3                        ;MORE TO PRINT?
                   387: ;
                   388: ;*************************************************************
                   389: ;
                   390: ; *** GOSUB *** & RETURN ***
                   391: ;
                   392: ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
                   393: ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
                   394: ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
                   395: ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
                   396: ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
                   397: ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
                   398: ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
                   399: ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
                   400: ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
                   401: ;
                   402: ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
                   403: ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
                   404: ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
                   405: ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
                   406: ;
01bf cd 19 06      407: GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
01c2 df            408:         RST  3                          ;PARAMETERS
01c3 d5            409:         PUSH D                          ;AND TEXT POINTER
01c4 cd 38 05      410:         CALL FNDLN                      ;FIND THE TARGET LINE
01c7 c2 a0 00      411:         JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
01ca 2a 01 20      412:         LHLD CURRNT                     ;FOUND IT, SAVE OLD
01cd e5            413:         PUSH H                          ;'CURRNT' OLD 'STKGOS'
01ce 2a 03 20      414:         LHLD STKGOS
01d1 e5            415:         PUSH H
01d2 21 00 00      416:         LXI  H,0                        ;AND LOAD NEW ONES
01d5 22 09 20      417:         SHLD LOPVAR
01d8 39            418:         DAD  SP
01d9 22 03 20      419:         SHLD STKGOS
01dc c3 50 01      420:         JMP  RUNTSL                     ;THEN RUN THAT LINE
01df cd c2 04      421: RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
01e2 2a 03 20      422:         LHLD STKGOS                     ;OLD STACK POINTER
01e5 7c            423:         MOV  A,H                        ;0 MEANS NOT EXIST
01e6 b5            424:         ORA  L
01e7 ca c6 04      425:         JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
01ea f9            426:         SPHL                            ;ELSE, RESTORE IT
01eb e1            427:         POP  H
01ec 22 03 20      428:         SHLD STKGOS                     ;AND THE OLD 'STKGOS'
01ef e1            429:         POP  H
01f0 22 01 20      430:         SHLD CURRNT                     ;AND THE OLD 'CURRNT'
01f3 d1            431:         POP  D                          ;OLD TEXT POINTER
01f4 cd fd 05      432:         CALL POPA                       ;OLD "FOR" PARAMETERS
01f7 f7            433:         RST  6                          ;AND WE ARE BACK HOME
                   434: ;
                   435: ;*************************************************************
                   436: ;
                   437: ; *** FOR *** & NEXT ***
                   438: ;
                   439: ; 'FOR' HAS TWO FORMS:
                   440: ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
                   441: ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
                   442: ; EXP3=1.  (I.E., WITH A STEP OF +1.)
                   443: ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
                   444: ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
                   445: ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
                   446: ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
                   447: ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
                   448: ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
                   449: ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
                   450: ; BEFORE THE NEW ONE OVERWRITES IT.
                   451: ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
                   452: ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
                   453: ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
                   454: ; (PURGED FROM THE STACK..)
                   455: ;
                   456: ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
                   457: ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
                   458: ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
                   459: ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
                   460: ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
                   461: ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
                   462: ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
                   463: ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
                   464: ; IS PURGED AND EXECUTION CONTINUES.
                   465: ;
01f8 cd 19 06      466: FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
01fb cd a0 04      467:         CALL SETVAL                     ;SET THE CONTROL VAR.
01fe 2b            468:         DCX  H                          ;HL IS ITS ADDRESS
01ff 22 09 20      469:         SHLD LOPVAR                     ;SAVE THAT
0202 21 07 07      470:         LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0205 c3 2f 07      471:         JMP  EXEC                       ;FOR THE WORD 'TO'
0208 df            472: FR1:    RST  3                          ;EVALUATE THE LIMIT
0209 22 0d 20      473:         SHLD LOPLMT                     ;SAVE THAT
020c 21 0d 07      474:         LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
020f c3 2f 07      475:         JMP EXEC                        ;FOR THE WORD 'STEP'
0212 df            476: FR2:    RST  3                          ;FOUND IT, GET STEP
0213 c3 19 02      477:         JMP  FR4
0216 21 01 00      478: FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0219 22 0b 20      479: FR4:    SHLD LOPINC                     ;SAVE THAT TOO
021c 2a 01 20      480: FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
021f 22 0f 20      481:         SHLD LOPLN
0222 eb            482:         XCHG                            ;AND TEXT POINTER
0223 22 11 20      483:         SHLD LOPPT
0226 01 0a 00      484:         LXI  B,0AH                      ;DIG INTO STACK TO
0229 2a 09 20      485:         LHLD LOPVAR                     ;FIND 'LOPVAR'
022c eb            486:         XCHG
022d 60            487:         MOV  H,B
022e 68            488:         MOV  L,B                        ;HL=0 NOW
022f 39            489:         DAD  SP                         ;HERE IS THE STACK
0230 3e            490:         DB   3EH
0231 09            491: FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0232 7e            492:         MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0233 23            493:         INX  H
0234 b6            494:         ORA  M
0235 ca 52 02      495:         JZ   FR8                        ;0 SAYS NO MORE IN IT
0238 7e            496:         MOV  A,M
0239 2b            497:         DCX  H
023a ba            498:         CMP  D                          ;SAME AS THIS ONE?
023b c2 31 02      499:         JNZ  FR7
023e 7e            500:         MOV  A,M                        ;THE OTHER HALF?
023f bb            501:         CMP  E
0240 c2 31 02      502:         JNZ  FR7
0243 eb            503:         XCHG                            ;YES, FOUND ONE
0244 21 00 00      504:         LXI  H,0H
0247 39            505:         DAD  SP                         ;TRY TO MOVE SP
0248 44            506:         MOV  B,H
0249 4d            507:         MOV  C,L
024a 21 0a 00      508:         LXI  H,0AH
024d 19            509:         DAD  D
024e cd ee 05      510:         CALL MVDOWN                     ;AND PURGE 10 WORDS
0251 f9            511:         SPHL                            ;IN THE STACK
0252 2a 11 20      512: FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0255 eb            513:         XCHG
0256 f7            514:         RST  6                          ;AND CONTINUE
                   515: ;
0257 ff            516: NEXT:   RST  7                          ;GET ADDRESS OF VAR.
0258 da c6 04      517:         JC   QWHAT                      ;NO VARIABLE, "WHAT?"
025b 22 05 20      518:         SHLD VARNXT                     ;YES, SAVE IT
025e d5            519: NX0:    PUSH D                          ;SAVE TEXT POINTER
025f eb            520:         XCHG
0260 2a 09 20      521:         LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0263 7c            522:         MOV  A,H
0264 b5            523:         ORA  L                          ;0 SAYS NEVER HAD ONE
0265 ca c7 04      524:         JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0268 e7            525:         RST  4                          ;ELSE WE CHECK THEM
0269 ca 76 02      526:         JZ   NX3                        ;OK, THEY AGREE
026c d1            527:         POP  D                          ;NO, LET'S SEE
026d cd fd 05      528:         CALL POPA                       ;PURGE CURRENT LOOP
0270 2a 05 20      529:         LHLD VARNXT                     ;AND POP ONE LEVEL
0273 c3 5e 02      530:         JMP  NX0                        ;GO CHECK AGAIN
0276 5e            531: NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0277 23            532:         INX  H
0278 56            533:         MOV  D,M                        ;DE=VALUE OF VAR.
0279 2a 0b 20      534:         LHLD LOPINC
027c e5            535:         PUSH H
027d 7c            536:         MOV  A,H
027e aa            537:         XRA  D
027f 7a            538:         MOV  A,D
0280 19            539:         DAD  D                          ;ADD ONE STEP
0281 fa 88 02      540:         JM   NX4
0284 ac            541:         XRA  H
0285 fa aa 02      542:         JM   NX5
0288 eb            543: NX4:    XCHG
0289 2a 09 20      544:         LHLD LOPVAR                     ;PUT IT BACK
028c 73            545:         MOV  M,E
028d 23            546:         INX  H
028e 72            547:         MOV  M,D
028f 2a 0d 20      548:         LHLD LOPLMT                     ;HL->LIMIT
0292 f1            549:         POP  PSW                        ;OLD HL
0293 b7            550:         ORA  A
0294 f2 98 02      551:         JP   NX1                        ;STEP > 0
0297 eb            552:         XCHG                            ;STEP < 0
0298 cd 98 04      553: NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
029b d1            554:         POP  D                          ;RESTORE TEXT POINTER
029c da ac 02      555:         JC   NX2                        ;OUTSIDE LIMIT
029f 2a 0f 20      556:         LHLD LOPLN                      ;WITHIN LIMIT, GO
02a2 22 01 20      557:         SHLD CURRNT                     ;BACK TO THE SAVED
02a5 2a 11 20      558:         LHLD LOPPT                      ;'CURRNT' AND TEXT
02a8 eb            559:         XCHG                            ;POINTER
02a9 f7            560:         RST  6
02aa e1            561: NX5:    POP  H
02ab d1            562:         POP  D
02ac cd fd 05      563: NX2:    CALL POPA                       ;PURGE THIS LOOP
02af f7            564:         RST  6
                   565: ;
                   566: ;*************************************************************
                   567: ;
                   568: ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
                   569: ;
                   570: ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
                   571: ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
                   572: ;
                   573: ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
                   574: ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
                   575: ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
                   576: ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
                   577: ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
                   578: ; EXECUTION CONTINUES AT THE NEXT LINE.
                   579: ;
                   580: ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
                   581: ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
                   582: ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
                   583: ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
                   584: ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
                   585: ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
                   586: ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
                   587: ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
                   588: ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
                   589: ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
                   590: ;
                   591: ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
                   592: ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
                   593: ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
                   594: ; THIS IS HANDLED IN 'INPERR'.
                   595: ;
                   596: ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
                   597: ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
                   598: ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
                   599: ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
                   600: ; THIS IS DONE BY 'DEFLT'.
                   601: ;
02b0 21 00 00      602: REM:    LXI  H,0H                       ;*** REM ***
02b3 3e            603:         DB   3EH                        ;THIS IS LIKE 'IF 0'
                   604: ;
02b4 df            605: IFF:    RST  3                          ;*** IF ***
02b5 7c            606:         MOV  A,H                        ;IS THE EXPR.=0?
02b6 b5            607:         ORA  L
02b7 c2 57 01      608:         JNZ  RUNSML                     ;NO, CONTINUE
02ba cd 56 05      609:         CALL FNDSKP                     ;YES, SKIP REST OF LINE
02bd d2 50 01      610:         JNC  RUNTSL                     ;AND RUN THE NEXT LINE
02c0 c3 ba 00      611:         JMP  RSTART                     ;IF NO NEXT, RE-START
                   612: ;
02c3 2a 07 20      613: INPERR: LHLD STKINP                     ;*** INPERR ***
02c6 f9            614:         SPHL                            ;RESTORE OLD SP
02c7 e1            615:         POP  H                          ;AND OLD 'CURRNT'
02c8 22 01 20      616:         SHLD CURRNT
02cb d1            617:         POP  D                          ;AND OLD TEXT POINTER
02cc d1            618:         POP  D                          ;REDO INPUT
                   619: ;
                   620: INPUT:                                  ;*** INPUT ***
02cd d5            621: IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
02ce cd 6c 05      622:         CALL QTSTG                      ;IS NEXT ITEM A STRING?
02d1 c3 db 02      623:         JMP  IP2                        ;NO
02d4 ff            624:         RST  7                          ;YES, BUT FOLLOWED BY A
02d5 da 15 03      625:         JC   IP4                        ;VARIABLE?   NO.
02d8 c3 eb 02      626:         JMP  IP3                        ;YES.  INPUT VARIABLE
02db d5            627: IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
02dc ff            628:         RST  7                          ;MUST BE VARIABLE NOW
02dd da c6 04      629:         JC   QWHAT                      ;"WHAT?" IT IS NOT?
02e0 1a            630:         LDAX D                          ;GET READY FOR 'PRTSTR'
02e1 4f            631:         MOV  C,A
02e2 97            632:         SUB  A
02e3 12            633:         STAX D
02e4 d1            634:         POP  D
02e5 cd 60 05      635:         CALL PRTSTG                     ;PRINT STRING AS PROMPT
02e8 79            636:         MOV  A,C                        ;RESTORE TEXT
02e9 1b            637:         DCX  D
02ea 12            638:         STAX D
02eb d5            639: IP3:    PUSH D                          ;SAVE TEXT POINTER
02ec eb            640:         XCHG
02ed 2a 01 20      641:         LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
02f0 e5            642:         PUSH H
02f1 21 cd 02      643:         LXI  H,IP1                      ;A NEGATIVE NUMBER
02f4 22 01 20      644:         SHLD CURRNT                     ;AS A FLAG
02f7 21 00 00      645:         LXI  H,0H                       ;SAVE SP TOO
02fa 39            646:         DAD  SP
02fb 22 07 20      647:         SHLD STKINP
02fe d5            648:         PUSH D                          ;OLD HL
02ff 3e 3a         649:         MVI  A,3AH                      ;PRINT THIS TOO
0301 cd fa 04      650:         CALL GETLN                      ;AND GET A LINE
0304 11 be 3f      651:         LXI  D,BUFFER                   ;POINTS TO BUFFER
0307 df            652:         RST  3                          ;EVALUATE INPUT
0308 00            653:         NOP                             ;CAN BE 'CALL ENDCHK'
0309 00            654:         NOP
030a 00            655:         NOP
030b d1            656:         POP  D                          ;OK, GET OLD HL
030c eb            657:         XCHG
030d 73            658:         MOV  M,E                        ;SAVE VALUE IN VAR.
030e 23            659:         INX  H
030f 72            660:         MOV  M,D
0310 e1            661:         POP  H                          ;GET OLD 'CURRNT'
0311 22 01 20      662:         SHLD CURRNT
0314 d1            663:         POP  D                          ;AND OLD TEXT POINTER
0315 f1            664: IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0316 cf            665:         RST  1                          ;IS NEXT CH. ','?
0317 2c            666:         DB   ','
0318 03            667:         DB   IP5-$-1
0319 c3 cd 02      668:         JMP  IP1                        ;YES, MORE ITEMS.
031c f7            669: IP5:    RST  6
                   670: ;
031d 1a            671: DEFLT:  LDAX D                          ;***  DEFLT ***
031e fe 0d         672:         CPI  CR                         ;EMPTY LINE IS OK
0320 ca 2c 03      673:         JZ   LT1                        ;ELSE IT IS 'LET'
                   674: ;
0323 cd a0 04      675: LET:    CALL SETVAL                     ;*** LET ***
0326 cf            676:         RST  1                          ;SET VALUE TO VAR.
0327 2c            677:         DB   ','
0328 03            678:         DB   LT1-$-1
0329 c3 23 03      679:         JMP  LET                        ;ITEM BY ITEM
032c f7            680: LT1:    RST  6                          ;UNTIL FINISH
                   681: ;
                   682: ;*************************************************************
                   683: ;
                   684: ; *** EXPR ***
                   685: ;
                   686: ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
                   687: ; <EXPR>::<EXPR2>
                   688: ;         <EXPR2><REL.OP.><EXPR2>
                   689: ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
                   690: ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
                   691: ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
                   692: ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
                   693: ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
                   694: ; <EXPR4>::=<VARIABLE>
                   695: ;           <FUNCTION>
                   696: ;           (<EXPR>)
                   697: ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
                   698: ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
                   699: ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
                   700: ;
                   701: ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
                   702: ;       PUSH H                          ;SAVE <EXPR2> VALUE
032d 21 15 07      703: EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0330 c3 2f 07      704:         JMP  EXEC                       ;GO DO IT
0333 cd 5c 03      705: XP11:   CALL XP18                       ;REL.OP.">="
0336 d8            706:         RC                              ;NO, RETURN HL=0
0337 6f            707:         MOV  L,A                        ;YES, RETURN HL=1
0338 c9            708:         RET
0339 cd 5c 03      709: XP12:   CALL XP18                       ;REL.OP."#"
033c c8            710:         RZ                              ;FALSE, RETURN HL=0
033d 6f            711:         MOV  L,A                        ;TRUE, RETURN HL=1
033e c9            712:         RET
033f cd 5c 03      713: XP13:   CALL XP18                       ;REL.OP.">"
0342 c8            714:         RZ                              ;FALSE
0343 d8            715:         RC                              ;ALSO FALSE, HL=0
0344 6f            716:         MOV  L,A                        ;TRUE, HL=1
0345 c9            717:         RET
0346 cd 5c 03      718: XP14:   CALL XP18                       ;REL.OP."<="
0349 6f            719:         MOV  L,A                        ;SET HL=1
034a c8            720:         RZ                              ;REL. TRUE, RETURN
034b d8            721:         RC
034c 6c            722:         MOV  L,H                        ;ELSE SET HL=0
034d c9            723:         RET
034e cd 5c 03      724: XP15:   CALL XP18                       ;REL.OP."="
0351 c0            725:         RNZ                             ;FALSE, RETURN HL=0
0352 6f            726:         MOV  L,A                        ;ELSE SET HL=1
0353 c9            727:         RET
0354 cd 5c 03      728: XP16:   CALL XP18                       ;REL.OP."<"
0357 d0            729:         RNC                             ;FALSE, RETURN HL=0
0358 6f            730:         MOV  L,A                        ;ELSE SET HL=1
0359 c9            731:         RET
035a e1            732: XP17:   POP  H                          ;NOT .REL.OP
035b c9            733:         RET                             ;RETURN HL=<EXPR2>
035c 79            734: XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
035d e1            735:         POP  H                          ;REL.OP.'S
035e c1            736:         POP  B
035f e5            737:         PUSH H                          ;REVERSE TOP OF STACK
0360 c5            738:         PUSH B
0361 4f            739:         MOV  C,A
0362 cd 71 03      740:         CALL EXPR2                      ;GET 2ND <EXPR2>
0365 eb            741:         XCHG                            ;VALUE IN DE NOW
0366 e3            742:         XTHL                            ;1ST <EXPR2> IN HL
0367 cd 98 04      743:         CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
036a d1            744:         POP  D                          ;RESTORE TEXT POINTER
036b 21 00 00      745:         LXI  H,0H                       ;SET HL=0, A=1
036e 3e 01         746:         MVI  A,1
0370 c9            747:         RET
                   748: ;
0371 cf            749: EXPR2:  RST  1                          ;NEGATIVE SIGN?
0372 2d            750:         DB   '-'
0373 06            751:         DB   XP21-$-1
0374 21 00 00      752:         LXI  H,0H                       ;YES, FAKE '0-'
0377 c3 9b 03      753:         JMP  XP26                       ;TREAT LIKE SUBTRACT
037a cf            754: XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
037b 2b            755:         DB   '+'
037c 00            756:         DB   XP22-$-1
037d cd a5 03      757: XP22:   CALL EXPR3                      ;1ST <EXPR3>
0380 cf            758: XP23:   RST  1                          ;ADD?
0381 2b            759:         DB   '+'
0382 15            760:         DB   XP25-$-1
0383 e5            761:         PUSH H                          ;YES, SAVE VALUE
0384 cd a5 03      762:         CALL EXPR3                      ;GET 2ND <EXPR3>
0387 eb            763: XP24:   XCHG                            ;2ND IN DE
0388 e3            764:         XTHL                            ;1ST IN HL
0389 7c            765:         MOV  A,H                        ;COMPARE SIGN
038a aa            766:         XRA  D
038b 7a            767:         MOV  A,D
038c 19            768:         DAD  D
038d d1            769:         POP  D                          ;RESTORE TEXT POINTER
038e fa 80 03      770:         JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0391 ac            771:         XRA  H                          ;1ST AND 2ND SIGN EQUAL
0392 f2 80 03      772:         JP   XP23                       ;SO IS RESULT
0395 c3 9f 00      773:         JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0398 cf            774: XP25:   RST  1                          ;SUBTRACT?
0399 2d            775:         DB   '-'
039a 86            776:         DB   XP42-$-1
039b e5            777: XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
039c cd a5 03      778:         CALL EXPR3                      ;GET 2ND <EXPR3>
039f cd 86 04      779:         CALL CHGSGN                     ;NEGATE
03a2 c3 87 03      780:         JMP  XP24                       ;AND ADD THEM
                   781: ;
03a5 cd 05 04      782: EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
03a8 cf            783: XP31:   RST  1                          ;MULTIPLY?
03a9 2a            784:         DB   '*'
03aa 2d            785:         DB   XP34-$-1
03ab e5            786:         PUSH H                          ;YES, SAVE 1ST
03ac cd 05 04      787:         CALL EXPR4                      ;AND GET 2ND <EXPR4>
03af 06 00         788:         MVI  B,0H                       ;CLEAR B FOR SIGN
03b1 cd 83 04      789:         CALL CHKSGN                     ;CHECK SIGN
03b4 e3            790:         XTHL                            ;1ST IN HL
03b5 cd 83 04      791:         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03b8 eb            792:         XCHG
03b9 e3            793:         XTHL
03ba 7c            794:         MOV  A,H                        ;IS HL > 255 ?
03bb b7            795:         ORA  A
03bc ca c5 03      796:         JZ   XP32                       ;NO
03bf 7a            797:         MOV  A,D                        ;YES, HOW ABOUT DE
03c0 b2            798:         ORA  D
03c1 eb            799:         XCHG                            ;PUT SMALLER IN HL
03c2 c2 a0 00      800:         JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
03c5 7d            801: XP32:   MOV  A,L                        ;THIS IS DUMB
03c6 21 00 00      802:         LXI  H,0H                       ;CLEAR RESULT
03c9 b7            803:         ORA  A                          ;ADD AND COUNT
03ca ca f7 03      804:         JZ   XP35
03cd 19            805: XP33:   DAD  D
03ce da a0 00      806:         JC   AHOW                       ;OVERFLOW
03d1 3d            807:         DCR  A
03d2 c2 cd 03      808:         JNZ  XP33
03d5 c3 f7 03      809:         JMP  XP35                       ;FINISHED
03d8 cf            810: XP34:   RST  1                          ;DIVIDE?
03d9 2f            811:         DB   '/'
03da 46            812:         DB   XP42-$-1
03db e5            813:         PUSH H                          ;YES, SAVE 1ST <EXPR4>
03dc cd 05 04      814:         CALL EXPR4                      ;AND GET THE SECOND ONE
03df 06 00         815:         MVI  B,0H                       ;CLEAR B FOR SIGN
03e1 cd 83 04      816:         CALL CHKSGN                     ;CHECK SIGN OF 2ND
03e4 e3            817:         XTHL                            ;GET 1ST IN HL
03e5 cd 83 04      818:         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03e8 eb            819:         XCHG
03e9 e3            820:         XTHL
03ea eb            821:         XCHG
03eb 7a            822:         MOV  A,D                        ;DIVIDE BY 0?
03ec b3            823:         ORA  E
03ed ca a0 00      824:         JZ   AHOW                       ;SAY "HOW?"
03f0 c5            825:         PUSH B                          ;ELSE SAVE SIGN
03f1 cd 66 04      826:         CALL DIVIDE                     ;USE SUBROUTINE
03f4 60            827:         MOV  H,B                        ;RESULT IN HL NOW
03f5 69            828:         MOV  L,C
03f6 c1            829:         POP  B                          ;GET SIGN BACK
03f7 d1            830: XP35:   POP  D                          ;AND TEXT POINTER
03f8 7c            831:         MOV  A,H                        ;HL MUST BE +
03f9 b7            832:         ORA  A
03fa fa 9f 00      833:         JM   QHOW                       ;ELSE IT IS OVERFLOW
03fd 78            834:         MOV  A,B
03fe b7            835:         ORA  A
03ff fc 86 04      836:         CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0402 c3 a8 03      837:         JMP  XP31                       ;LOOK FOR MORE TERMS
                   838: ;
0405 21 f5 06      839: EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0408 c3 2f 07      840:         JMP  EXEC                       ;AND GO DO IT
040b ff            841: XP40:   RST  7                          ;NO, NOT A FUNCTION
040c da 14 04      842:         JC   XP41                       ;NOR A VARIABLE
040f 7e            843:         MOV  A,M                        ;VARIABLE
0410 23            844:         INX  H
0411 66            845:         MOV  H,M                        ;VALUE IN HL
0412 6f            846:         MOV  L,A
0413 c9            847:         RET
0414 cd 77 00      848: XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0417 78            849:         MOV  A,B                        ;# OF DIGIT
0418 b7            850:         ORA  A
0419 c0            851:         RNZ                             ;OK
041a cf            852: PARN:   RST  1
041b 28            853:         DB   '('
041c 05            854:         DB   XP43-$-1
041d df            855:         RST  3                          ;"(EXPR)"
041e cf            856:         RST  1
041f 29            857:         DB   ')'
0420 01            858:         DB   XP43-$-1
0421 c9            859: XP42:   RET
0422 c3 c6 04      860: XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
                   861: ;
0425 cd 1a 04      862: RND:    CALL PARN                       ;*** RND(EXPR) ***
0428 7c            863:         MOV  A,H                        ;EXPR MUST BE +
0429 b7            864:         ORA  A
042a fa 9f 00      865:         JM   QHOW
042d b5            866:         ORA  L                          ;AND NON-ZERO
042e ca 9f 00      867:         JZ   QHOW
0431 d5            868:         PUSH D                          ;SAVE BOTH
0432 e5            869:         PUSH H
0433 2a 13 20      870:         LHLD RANPNT                     ;GET MEMORY AS RANDOM
0436 11 5d 07      871:         LXI  D,LSTROM                   ;NUMBER
0439 e7            872:         RST  4
043a da 40 04      873:         JC   RA1                        ;WRAP AROUND IF LAST
043d 21 00 00      874:         LXI  H,START
0440 5e            875: RA1:    MOV  E,M
0441 23            876:         INX  H
0442 56            877:         MOV  D,M
0443 22 13 20      878:         SHLD RANPNT
0446 e1            879:         POP  H
0447 eb            880:         XCHG
0448 c5            881:         PUSH B
0449 cd 66 04      882:         CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
044c c1            883:         POP  B
044d d1            884:         POP  D
044e 23            885:         INX  H
044f c9            886:         RET
                   887: ;
0450 cd 1a 04      888: ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0453 1b            889:         DCX  D
0454 cd 83 04      890:         CALL CHKSGN                     ;CHECK SIGN
0457 13            891:         INX  D
0458 c9            892:         RET
                   893: ;
0459 2a 15 20      894: SIZE:   LHLD TXTUNF                     ;*** SIZE ***
045c d5            895:         PUSH D                          ;GET THE NUMBER OF FREE
045d eb            896:         XCHG                            ;BYTES BETWEEN 'TXTUNF'
045e 21 87 3f      897:         LXI  H,VARBGN                   ;AND 'VARBGN'
0461 cd 7c 04      898:         CALL SUBDE
0464 d1            899:         POP  D
0465 c9            900:         RET
                   901: ;
                   902: ;*************************************************************
                   903: ;
                   904: ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
                   905: ;
                   906: ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
                   907: ;
                   908: ; 'SUBDE' SUBSTRACTS DE FROM HL
                   909: ;
                   910: ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
                   911: ; SIGN AND FLIP SIGN OF B.
                   912: ;
                   913: ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
                   914: ;
                   915: ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
                   916: ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
                   917: ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
                   918: ;
0466 e5            919: DIVIDE: PUSH H                          ;*** DIVIDE ***
0467 6c            920:         MOV  L,H                        ;DIVIDE H BY DE
0468 26 00         921:         MVI  H,0
046a cd 71 04      922:         CALL DV1
046d 41            923:         MOV  B,C                        ;SAVE RESULT IN B
046e 7d            924:         MOV  A,L                        ;(REMINDER+L)/DE
046f e1            925:         POP  H
0470 67            926:         MOV  H,A
0471 0e ff         927: DV1:    MVI  C,0FFH                     ;RESULT IN C
0473 0c            928: DV2:    INR  C                          ;DUMB ROUTINE
0474 cd 7c 04      929:         CALL SUBDE                      ;DIVIDE BY SUBTRACT
0477 d2 73 04      930:         JNC  DV2                        ;AND COUNT
047a 19            931:         DAD  D
047b c9            932:         RET
                   933: ;
047c 7d            934: SUBDE:  MOV  A,L                        ;*** SUBDE ***
047d 93            935:         SUB  E                          ;SUBSTRACT DE FROM
047e 6f            936:         MOV  L,A                        ;HL
047f 7c            937:         MOV  A,H
0480 9a            938:         SBB  D
0481 67            939:         MOV  H,A
0482 c9            940:         RET
                   941: ;
0483 7c            942: CHKSGN: MOV  A,H                        ;*** CHKSGN ***
0484 b7            943:         ORA  A                          ;CHECK SIGN OF HL
0485 f0            944:         RP                              ;IF -, CHANGE SIGN
                   945: ;
0486 7c            946: CHGSGN: MOV  A,H                        ;*** CHGSGN ***
0487 f5            947:         PUSH PSW
0488 2f            948:         CMA                             ;CHANGE SIGN OF HL
0489 67            949:         MOV  H,A
048a 7d            950:         MOV  A,L
048b 2f            951:         CMA
048c 6f            952:         MOV  L,A
048d 23            953:         INX  H
048e f1            954:         POP  PSW
048f ac            955:         XRA  H
0490 f2 9f 00      956:         JP   QHOW
0493 78            957:         MOV  A,B                        ;AND ALSO FLIP B
0494 ee 80         958:         XRI  80H
0496 47            959:         MOV  B,A
0497 c9            960:         RET
                   961: ;
0498 7c            962: CKHLDE: MOV  A,H
0499 aa            963:         XRA  D                          ;SAME SIGN?
049a f2 9e 04      964:         JP   CK1                        ;YES, COMPARE
049d eb            965:         XCHG                            ;NO, XCH AND COMP
049e e7            966: CK1:    RST  4
049f c9            967:         RET
                   968: ;
                   969: ;*************************************************************
                   970: ;
                   971: ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
                   972: ;
                   973: ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
                   974: ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
                   975: ; TO THAT VALUE.
                   976: ;
                   977: ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
                   978: ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
                   979: ; NEXT LINE AND CONTINUE FROM THERE.
                   980: ;
                   981: ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
                   982: ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
                   983: ;
                   984: ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
                   985: ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
                   986: ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
                   987: ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
                   988: ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
                   989: ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
                   990: ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
                   991: ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
                   992: ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
                   993: ;
                   994: ; RELATED TO 'ERROR' ARE THE FOLLOWING:
                   995: ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
                   996: ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
                   997: ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
                   998: ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
                   999: ;
04a0 ff           1000: SETVAL: RST  7                          ;*** SETVAL ***
04a1 da c6 04     1001:         JC   QWHAT                      ;"WHAT?" NO VARIABLE
04a4 e5           1002:         PUSH H                          ;SAVE ADDRESS OF VAR.
04a5 cf           1003:         RST  1                          ;PASS "=" SIGN
04a6 3d           1004:         DB   '='
04a7 08           1005:         DB   SV1-$-1
04a8 df           1006:         RST  3                          ;EVALUATE EXPR.
04a9 44           1007:         MOV  B,H                        ;VALUE IS IN BC NOW
04aa 4d           1008:         MOV  C,L
04ab e1           1009:         POP  H                          ;GET ADDRESS
04ac 71           1010:         MOV  M,C                        ;SAVE VALUE
04ad 23           1011:         INX  H
04ae 70           1012:         MOV  M,B
04af c9           1013:         RET
04b0 c3 c6 04     1014: SV1:    JMP  QWHAT                      ;NO "=" SIGN
                  1015: ;
04b3 cf           1016: FIN:    RST  1                          ;*** FIN ***
04b4 3b           1017:         DB   3BH
04b5 04           1018:         DB   FI1-$-1
04b6 f1           1019:         POP  PSW                        ;";", PURGE RET. ADDR.
04b7 c3 57 01     1020:         JMP  RUNSML                     ;CONTINUE SAME LINE
04ba cf           1021: FI1:    RST  1                          ;NOT ";", IS IT CR?
04bb 0d           1022:         DB   CR
04bc 04           1023:         DB   FI2-$-1
04bd f1           1024:         POP  PSW                        ;YES, PURGE RET. ADDR.
04be c3 47 01     1025:         JMP  RUNNXL                     ;RUN NEXT LINE
04c1 c9           1026: FI2:    RET                             ;ELSE RETURN TO CALLER
                  1027: ;
04c2 ef           1028: ENDCHK: RST  5                          ;*** ENDCHK ***
04c3 fe 0d        1029:         CPI  CR                         ;END WITH CR?
04c5 c8           1030:         RZ                              ;OK, ELSE SAY: "WHAT?"
                  1031: ;
04c6 d5           1032: QWHAT:  PUSH D                          ;*** QWHAT ***
04c7 11 ae 00     1033: AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
04ca 97           1034: ERROR:  SUB  A                          ;*** ERROR ***
04cb cd 60 05     1035:         CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
04ce d1           1036:         POP  D                          ;OR 'SORRY'
04cf 1a           1037:         LDAX D                          ;SAVE THE CHARACTER
04d0 f5           1038:         PUSH PSW                        ;AT WHERE OLD DE ->
04d1 97           1039:         SUB  A                          ;AND PUT A 0 THERE
04d2 12           1040:         STAX D
04d3 2a 01 20     1041:         LHLD CURRNT                     ;GET CURRENT LINE #
04d6 e5           1042:         PUSH H
04d7 7e           1043:         MOV  A,M                        ;CHECK THE VALUE
04d8 23           1044:         INX  H
04d9 b6           1045:         ORA  M
04da d1           1046:         POP  D
04db ca ba 00     1047:         JZ   RSTART                     ;IF ZERO, JUST RESTART
04de 7e           1048:         MOV  A,M                        ;IF NEGATIVE,
04df b7           1049:         ORA  A
04e0 fa c3 02     1050:         JM   INPERR                     ;REDO INPUT
04e3 cd d2 05     1051:         CALL PRTLN                      ;ELSE PRINT THE LINE
04e6 1b           1052:         DCX  D                          ;UPTO WHERE THE 0 IS
04e7 f1           1053:         POP  PSW                        ;RESTORE THE CHARACTER
04e8 12           1054:         STAX D
04e9 3e 3f        1055:         MVI  A,3FH                      ;PRINT A "?"
04eb d7           1056:         RST  2
04ec 97           1057:         SUB  A                          ;AND THE REST OF THE
04ed cd 60 05     1058:         CALL PRTSTG                     ;LINE
04f0 c3 ba 00     1059:         JMP  RSTART                     ;THEN RESTART
                  1060: ;
04f3 d5           1061: QSORRY: PUSH D                          ;*** QSORRY ***
04f4 11 b4 00     1062: ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
04f7 c3 ca 04     1063:         JMP  ERROR
                  1064: ;
                  1065: ;*************************************************************
                  1066: ;
                  1067: ; *** GETLN *** FNDLN (& FRIENDS) ***
                  1068: ;
                  1069: ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
                  1070: ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
                  1071: ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
                  1072: ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
                  1073: ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
                  1074: ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
                  1075: ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
                  1076: ;
                  1077: ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
                  1078: ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
                  1079: ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
                  1080: ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
                  1081: ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
                  1082: ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
                  1083: ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
                  1084: ; LINE, FLAGS ARE C & NZ.
                  1085: ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
                  1086: ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
                  1087: ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
                  1088: ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
                  1089: ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
                  1090: ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
                  1091: ;
04fa d7           1092: GETLN:  RST  2                          ;*** GETLN ***
04fb 11 be 3f     1093:         LXI  D,BUFFER                   ;PROMPT AND INIT.
04fe cd 76 06     1094: GL1:    CALL CHKIO                      ;CHECK KEYBOARD
0501 ca fe 04     1095:         JZ   GL1                        ;NO INPUT, WAIT
0504 fe 7f        1096:         CPI  7FH                        ;DELETE LAST CHARACTER?
0506 ca 23 05     1097:         JZ   GL3                        ;YES
0509 d7           1098:         RST  2                          ;INPUT, ECHO BACK
050a fe 0a        1099:         CPI  0AH                        ;IGNORE LF
050c ca fe 04     1100:         JZ   GL1
050f b7           1101:         ORA  A                          ;IGNORE NULL
0510 ca fe 04     1102:         JZ   GL1
0513 fe 7d        1103:         CPI  7DH                        ;DELETE THE WHOLE LINE?
0515 ca 30 05     1104:         JZ   GL4                        ;YES
0518 12           1105:         STAX D                          ;ELSE SAVE INPUT
0519 13           1106:         INX  D                          ;AND BUMP POINTER
051a fe 0d        1107:         CPI  0DH                        ;WAS IT CR?
051c c8           1108:         RZ                              ;YES, END OF LINE
051d 7b           1109:         MOV  A,E                        ;ELSE MORE FREE ROOM?
051e fe fe        1110:         CPI  BUFEND & 0FFH
0520 c2 fe 04     1111:         JNZ  GL1                        ;YES, GET NEXT INPUT
0523 7b           1112: GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
0524 fe be        1113:         CPI  BUFFER & 0FFH            ;BUT DO WE HAVE ANY?
0526 ca 30 05     1114:         JZ   GL4                        ;NO, REDO WHOLE LINE
0529 1b           1115:         DCX  D                          ;YES, BACKUP POINTER
052a 3e 5c        1116:         MVI  A,5CH                      ;AND ECHO A BACK-SLASH
052c d7           1117:         RST  2
052d c3 fe 04     1118:         JMP  GL1                        ;GO GET NEXT INPUT
0530 cd 0e 00     1119: GL4:    CALL CRLF                       ;REDO ENTIRE LINE
0533 3e 5e        1120:         MVI  A,05EH                     ;CR, LF AND UP-ARROW
0535 c3 fa 04     1121:         JMP  GETLN
                  1122: ;
0538 7c           1123: FNDLN:  MOV  A,H                        ;*** FNDLN ***
0539 b7           1124:         ORA  A                          ;CHECK SIGN OF HL
053a fa 9f 00     1125:         JM   QHOW                       ;IT CANNOT BE -
053d 11 17 20     1126:         LXI  D,TXTBGN                   ;INIT TEXT POINTER
                  1127: ;
                  1128: FNDLP:                                  ;*** FDLNP ***
0540 e5           1129: FL1:    PUSH H                          ;SAVE LINE #
0541 2a 15 20     1130:         LHLD TXTUNF                     ;CHECK IF WE PASSED END
0544 2b           1131:         DCX  H
0545 e7           1132:         RST  4
0546 e1           1133:         POP  H                          ;GET LINE # BACK
0547 d8           1134:         RC                              ;C,NZ PASSED END
0548 1a           1135:         LDAX D                          ;WE DID NOT, GET BYTE 1
0549 95           1136:         SUB  L                          ;IS THIS THE LINE?
054a 47           1137:         MOV  B,A                        ;COMPARE LOW ORDER
054b 13           1138:         INX  D
054c 1a           1139:         LDAX D                          ;GET BYTE 2
054d 9c           1140:         SBB  H                          ;COMPARE HIGH ORDER
054e da 55 05     1141:         JC   FL2                        ;NO, NOT THERE YET
0551 1b           1142:         DCX  D                          ;ELSE WE EITHER FOUND
0552 b0           1143:         ORA  B                          ;IT, OR IT IS NOT THERE
0553 c9           1144:         RET                             ;NC,Z:FOUND, NC,NZ:NO
                  1145: ;
                  1146: FNDNXT:                                 ;*** FNDNXT ***
0554 13           1147:         INX  D                          ;FIND NEXT LINE
0555 13           1148: FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
                  1149: ;
0556 1a           1150: FNDSKP: LDAX D                          ;*** FNDSKP ***
0557 fe 0d        1151:         CPI  CR                         ;TRY TO FIND CR
0559 c2 55 05     1152:         JNZ  FL2                        ;KEEP LOOKING
055c 13           1153:         INX  D                          ;FOUND CR, SKIP OVER
055d c3 40 05     1154:         JMP  FL1                        ;CHECK IF END OF TEXT
                  1155: ;
                  1156: ;*************************************************************
                  1157: ;
                  1158: ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
                  1159: ;
                  1160: ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
                  1161: ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
                  1162: ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
                  1163: ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
                  1164: ;
                  1165: ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
                  1166: ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
                  1167: ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
                  1168: ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
                  1169: ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
                  1170: ; OVER (USUALLY A JUMP INSTRUCTION.
                  1171: ;
                  1172: ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
                  1173: ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
                  1174: ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
                  1175: ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
                  1176: ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
                  1177: ;
                  1178: ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
                  1179: ;
0560 47           1180: PRTSTG: MOV  B,A                        ;*** PRTSTG ***
0561 1a           1181: PS1:    LDAX D                          ;GET A CHARACTER
0562 13           1182:         INX  D                          ;BUMP POINTER
0563 b8           1183:         CMP  B                          ;SAME AS OLD A?
0564 c8           1184:         RZ                              ;YES, RETURN
0565 d7           1185:         RST  2                          ;ELSE PRINT IT
0566 fe 0d        1186:         CPI  CR                         ;WAS IT A CR?
0568 c2 61 05     1187:         JNZ  PS1                        ;NO, NEXT
056b c9           1188:         RET                             ;YES, RETURN
                  1189: ;
056c cf           1190: QTSTG:  RST  1                          ;*** QTSTG ***
056d 22           1191:         DB   '"'
056e 0f           1192:         DB   QT3-$-1
056f 3e 22        1193:         MVI  A,22H                      ;IT IS A "
0571 cd 60 05     1194: QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
0574 fe 0d        1195:         CPI  CR                         ;WAS LAST ONE A CR?
0576 e1           1196:         POP  H                          ;RETURN ADDRESS
0577 ca 47 01     1197:         JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
057a 23           1198: QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
057b 23           1199:         INX  H
057c 23           1200:         INX  H
057d e9           1201:         PCHL                            ;RETURN
057e cf           1202: QT3:    RST  1                          ;IS IT A '?
057f 27           1203:         DB   27H
0580 05           1204:         DB   QT4-$-1
0581 3e 27        1205:         MVI  A,27H                      ;YES, DO THE SAME
0583 c3 71 05     1206:         JMP  QT1                        ;AS IN "
0586 cf           1207: QT4:    RST  1                          ;IS IT BACK-ARROW?
0587 5f           1208:         DB   5FH
0588 08           1209:         DB   QT5-$-1
0589 3e 8d        1210:         MVI  A,08DH                     ;YES, CR WITHOUT LF
058b d7           1211:         RST  2                          ;DO IT TWICE TO GIVE
058c d7           1212:         RST  2                          ;TTY ENOUGH TIME
058d e1           1213:         POP  H                          ;RETURN ADDRESS
058e c3 7a 05     1214:         JMP  QT2
0591 c9           1215: QT5:    RET                             ;NONE OF ABOVE
                  1216: ;
0592 06 00        1217: PRTNUM: MVI  B,0                        ;*** PRTNUM ***
0594 cd 83 04     1218:         CALL CHKSGN                     ;CHECK SIGN
0597 f2 9d 05     1219:         JP   PN1                        ;NO SIGN
059a 06 2d        1220:         MVI  B,'-'                      ;B=SIGN
059c 0d           1221:         DCR  C                          ;'-' TAKES SPACE
059d d5           1222: PN1:    PUSH D                          ;SAVE
059e 11 0a 00     1223:         LXI  D,0AH                      ;DECIMAL
05a1 d5           1224:         PUSH D                          ;SAVE AS A FLAG
05a2 0d           1225:         DCR  C                          ;C=SPACES
05a3 c5           1226:         PUSH B                          ;SAVE SIGN & SPACE
05a4 cd 66 04     1227: PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
05a7 78           1228:         MOV  A,B                        ;RESULT 0?
05a8 b1           1229:         ORA  C
05a9 ca b4 05     1230:         JZ   PN3                        ;YES, WE GOT ALL
05ac e3           1231:         XTHL                            ;NO, SAVE REMAINDER
05ad 2d           1232:         DCR  L                          ;AND COUNT SPACE
05ae e5           1233:         PUSH H                          ;HL IS OLD BC
05af 60           1234:         MOV  H,B                        ;MOVE RESULT TO BC
05b0 69           1235:         MOV  L,C
05b1 c3 a4 05     1236:         JMP  PN2                        ;AND DIVIDE BY 10
05b4 c1           1237: PN3:    POP  B                          ;WE GOT ALL DIGITS IN
05b5 0d           1238: PN4:    DCR  C                          ;THE STACK
05b6 79           1239:         MOV  A,C                        ;LOOK AT SPACE COUNT
05b7 b7           1240:         ORA  A
05b8 fa c1 05     1241:         JM   PN5                        ;NO LEADING BLANKS
05bb 3e 20        1242:         MVI  A,20H                      ;LEADING BLANKS
05bd d7           1243:         RST  2
05be c3 b5 05     1244:         JMP  PN4                        ;MORE?
05c1 78           1245: PN5:    MOV  A,B                        ;PRINT SIGN
05c2 b7           1246:         ORA  A
05c3 c4 10 00     1247:         CNZ  10H
05c6 5d           1248:         MOV  E,L                        ;LAST REMAINDER IN E
05c7 7b           1249: PN6:    MOV  A,E                        ;CHECK DIGIT IN E
05c8 fe 0a        1250:         CPI  0AH                        ;10 IS FLAG FOR NO MORE
05ca d1           1251:         POP  D
05cb c8           1252:         RZ                              ;IF SO, RETURN
05cc c6 30        1253:         ADI  30H                        ;ELSE CONVERT TO ASCII
05ce d7           1254:         RST  2                          ;AND PRINT THE DIGIT
05cf c3 c7 05     1255:         JMP  PN6                        ;GO BACK FOR MORE
                  1256: ;
05d2 1a           1257: PRTLN:  LDAX D                          ;*** PRTLN ***
05d3 6f           1258:         MOV  L,A                        ;LOW ORDER LINE #
05d4 13           1259:         INX  D
05d5 1a           1260:         LDAX D                          ;HIGH ORDER
05d6 67           1261:         MOV  H,A
05d7 13           1262:         INX  D
05d8 0e 04        1263:         MVI  C,4H                       ;PRINT 4 DIGIT LINE #
05da cd 92 05     1264:         CALL PRTNUM
05dd 3e 20        1265:         MVI  A,20H                      ;FOLLOWED BY A BLANK
05df d7           1266:         RST  2
05e0 97           1267:         SUB  A                          ;AND THEN THE NEXT
05e1 cd 60 05     1268:         CALL PRTSTG
05e4 c9           1269:         RET
                  1270: ;
                  1271: ;*************************************************************
                  1272: ;
                  1273: ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
                  1274: ;
                  1275: ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
                  1276: ; DE = HL
                  1277: ;
                  1278: ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
                  1279: ; UNTIL DE = BC
                  1280: ;
                  1281: ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
                  1282: ; STACK
                  1283: ;
                  1284: ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
                  1285: ; STACK
                  1286: ;
05e5 e7           1287: MVUP:   RST  4                          ;*** MVUP ***
05e6 c8           1288:         RZ                              ;DE = HL, RETURN
05e7 1a           1289:         LDAX D                          ;GET ONE BYTE
05e8 02           1290:         STAX B                          ;MOVE IT
05e9 13           1291:         INX  D                          ;INCREASE BOTH POINTERS
05ea 03           1292:         INX  B
05eb c3 e5 05     1293:         JMP  MVUP                       ;UNTIL DONE
                  1294: ;
05ee 78           1295: MVDOWN: MOV  A,B                        ;*** MVDOWN ***
05ef 92           1296:         SUB  D                          ;TEST IF DE = BC
05f0 c2 f6 05     1297:         JNZ  MD1                        ;NO, GO MOVE
05f3 79           1298:         MOV  A,C                        ;MAYBE, OTHER BYTE?
05f4 93           1299:         SUB  E
05f5 c8           1300:         RZ                              ;YES, RETURN
05f6 1b           1301: MD1:    DCX  D                          ;ELSE MOVE A BYTE
05f7 2b           1302:         DCX  H                          ;BUT FIRST DECREASE
05f8 1a           1303:         LDAX D                          ;BOTH POINTERS AND
05f9 77           1304:         MOV  M,A                        ;THEN DO IT
05fa c3 ee 05     1305:         JMP  MVDOWN                     ;LOOP BACK
                  1306: ;
05fd c1           1307: POPA:   POP  B                          ;BC = RETURN ADDR.
05fe e1           1308:         POP  H                          ;RESTORE LOPVAR, BUT
05ff 22 09 20     1309:         SHLD LOPVAR                     ;=0 MEANS NO MORE
0602 7c           1310:         MOV  A,H
0603 b5           1311:         ORA  L
0604 ca 17 06     1312:         JZ   PP1                        ;YEP, GO RETURN
0607 e1           1313:         POP  H                          ;NOP, RESTORE OTHERS
0608 22 0b 20     1314:         SHLD LOPINC
060b e1           1315:         POP  H
060c 22 0d 20     1316:         SHLD LOPLMT
060f e1           1317:         POP  H
0610 22 0f 20     1318:         SHLD LOPLN
0613 e1           1319:         POP  H
0614 22 11 20     1320:         SHLD LOPPT
0617 c5           1321: PP1:    PUSH B                          ;BC = RETURN ADDR.
0618 c9           1322:         RET
                  1323: ;
0619 21 00 b8     1324: PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
061c cd 86 04     1325:         CALL CHGSGN
061f c1           1326:         POP  B                          ;BC=RETURN ADDRESS
0620 39           1327:         DAD  SP                         ;IS STACK NEAR THE TOP?
0621 d2 f3 04     1328:         JNC  QSORRY                     ;YES, SORRY FOR THAT
0624 2a 09 20     1329:         LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
0627 7c           1330:         MOV  A,H                        ;BUT IF LOPVAR IS 0
0628 b5           1331:         ORA  L                          ;THAT WILL BE ALL
0629 ca 3f 06     1332:         JZ   PU1
062c 2a 11 20     1333:         LHLD LOPPT                      ;ELSE, MORE TO SAVE
062f e5           1334:         PUSH H
0630 2a 0f 20     1335:         LHLD LOPLN
0633 e5           1336:         PUSH H
0634 2a 0d 20     1337:         LHLD LOPLMT
0637 e5           1338:         PUSH H
0638 2a 0b 20     1339:         LHLD LOPINC
063b e5           1340:         PUSH H
063c 2a 09 20     1341:         LHLD LOPVAR
063f e5           1342: PU1:    PUSH H
0640 c5           1343:         PUSH B                          ;BC = RETURN ADDR.
0641 c9           1344:         RET
                  1345: ;
                  1346: ;*************************************************************
                  1347: ;
                  1348: ; *** OUTC *** & CHKIO ***
                  1349: ;
                  1350: ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
                  1351: ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
                  1352: ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
                  1353: ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
                  1354: ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
                  1355: ; ARE RESTORED.
                  1356: ;
                  1357: ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
                  1358: ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
                  1359: ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
                  1360: ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
                  1361: ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
                  1362: ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
                  1363: ;
                  1364: ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
                  1365: ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
                  1366: ;       ORA  A
                  1367: 
(f828)            1368: CONIN_ADDR		EQU 0F828h
(f830)            1369: CONOUT_ADDR		EQU 0F830h
(f820)            1370: CONSTAT_ADDR 	EQU 0F820h
                  1371: 
0642 32 00 20     1372: INIT:   STA  OCSW
                  1373:         ;MVI  A,3                        ;RESET ACIA
                  1374:         ;OUT  16
                  1375:         ;MVI  A,15H			;15H FOR 8N1, 11H FOR 8N2
                  1376:         ;OUT  16
0645 16 19        1377:         MVI  D,19H
                  1378: PATLOP:
0647 cd 0e 00     1379:         CALL CRLF
064a 15           1380:         DCR  D
064b c2 47 06     1381:         JNZ  PATLOP
064e 97           1382:         SUB  A
064f 11 97 06     1383:         LXI  D,MSG1
0652 cd 60 05     1384:         CALL PRTSTG
0655 21 00 00     1385:         LXI  H,START
0658 22 13 20     1386:         SHLD RANPNT
065b 21 17 20     1387:         LXI  H,TXTBGN
065e 22 15 20     1388:         SHLD TXTUNF
0661 c3 ba 00     1389:         JMP  RSTART
0664 c2 69 06     1390: OC2:    JNZ  OC3                        ;IT IS ON
0667 f1           1391:         POP  PSW                        ;IT IS OFF
0668 c9           1392:         RET                             ;RESTORE AF AND RETURN
                  1393: 
0669 f1           1394: OC3:	POP PSW
066a cd 30 f8     1395: 		CALL CONOUT_ADDR
                  1396: 		;IN   16                         ;COME HERE TO DO OUTPUT
                  1397:         ;ANI  2H                         ;STATUS BIT
                  1398:         ;JZ   OC3                        ;NOT READY, WAIT
                  1399:         ;POP  PSW                        ;READY, GET OLD A BACK
                  1400:         ;OUT  17                         ;AND SEND IT OUT
066d fe 0d        1401:         CPI  CR                         ;WAS IT CR?
066f c0           1402:         RNZ                             ;NO, FINISHED
0670 3e 0a        1403:         MVI  A,LF                       ;YES, WE SEND LF TOO
0672 d7           1404:         RST  2                          ;THIS IS RECURSIVE
0673 3e 0d        1405:         MVI  A,CR                       ;GET CR BACK IN A
0675 c9           1406:         RET
                  1407: ;
0676 cd 20 f8     1408: CHKIO:  CALL CONSTAT_ADDR
0679 c2 7d 06     1409: 		JNZ CHKIO_CNT
067c c8           1410: 		RZ
                  1411: 		;IN   16                         ;*** CHKIO ***
                  1412:         ;NOP                             ;STATUS BIT FLIPPED?
                  1413:         ;ANI  1H                         ;MASK STATUS BIT
                  1414:         ;RZ                              ;NOT READY, RETURN "Z"
                  1415: CHKIO_CNT:
                  1416:         ;IN   17                         ;READY, READ DATA
067d cd 28 f8     1417:         CALL CONIN_ADDR
0680 e6 7f        1418: 		ANI  7FH                        ;MASK BIT 7 OFF
0682 fe 0f        1419: 		CPI  0FH                        ;IS IT CONTROL-O?
0684 c2 91 06     1420:         JNZ  CI1                        ;NO, MORE CHECKING
0687 3a 00 20     1421:         LDA  OCSW                       ;CONTROL-O FLIPS OCSW
068a 2f           1422:         CMA                             ;ON TO OFF, OFF TO ON
068b 32 00 20     1423:         STA  OCSW
068e c3 76 06     1424:         JMP  CHKIO                      ;GET ANOTHER INPUT
0691 fe 03        1425: CI1:    CPI  3H                         ;IS IT CONTROL-C?
0693 c0           1426:         RNZ                             ;NO, RETURN "NZ"
0694 c3 ba 00     1427:         JMP  RSTART                     ;YES, RESTART TBI
                  1428: ;
0697 54 49 4e 59  1429: MSG1:   DB   'TINY '
     20 
069c 42 41 53 49  1430:         DB   'BASIC'
     43 
06a1 0d           1431:         DB   CR
                  1432: ;
                  1433: ;*************************************************************
                  1434: ;
                  1435: ; *** TABLES *** DIRECT *** & EXEC ***
                  1436: ;
                  1437: ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
                  1438: ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
                  1439: ; OF CODE ACCORDING TO THE TABLE.
                  1440: ;
                  1441: ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
                  1442: ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
                  1443: ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
                  1444: ; ALL DIRECT AND STATEMENT COMMANDS.
                  1445: ;
                  1446: ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
                  1447: ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
                  1448: ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
                  1449: ;
                  1450: ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
                  1451: ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
                  1452: ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
                  1453: ; BYTE SET TO 1.
                  1454: ;
                  1455: ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
                  1456: ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
                  1457: ; MATCH THIS NULL ITEM AS DEFAULT.
                  1458: ;
                  1459: 
                  1460: ;	DB (loop / 16) + 128
                  1461: ;	DB loop
                  1462: 	
                  1463: TAB1:                                   ;DIRECT COMMANDS
06a2 4c 49 53 54  1464:         DB   'LIST'
                  1465:         ;DWA  LIST
06a6 96           1466: 		DB (LIST / 16) + 128
06a7 6f           1467: 		DB LIST	
06a8 52 55 4e     1468:         DB   'RUN'
                  1469:         ;DWA  RUN
06ab 94           1470: 		DB (RUN / 16) + 128
06ac 41           1471: 		DB RUN
06ad 4e 45 57     1472:         DB   'NEW'
                  1473:         ;DWA  NEW
06b0 93           1474: 		DB (NEW / 16) + 128
06b1 32           1475: 		DB NEW
                  1476: ;
                  1477: TAB2:                                   ;DIRECT/STATEMENT
06b2 4e 45 58 54  1478:         DB   'NEXT'
                  1479:         ;DWA  NEXT
06b6 a5           1480: 		DB (NEXT / 16) + 128
06b7 57           1481: 		DB NEXT
06b8 4c 45 54     1482:         DB   'LET'
                  1483:         ;DWA  LET
06bb b2           1484: 		DB (LET / 16) + 128
06bc 23           1485: 		DB LET
06bd 49 46        1486:         DB   'IF'
                  1487:         ;DWA  IFF
06bf ab           1488: 		DB (IFF / 16) + 128
06c0 b4           1489: 		DB IFF
06c1 47 4f 54 4f  1490:         DB   'GOTO'
                  1491:         ;DWA  GOTO
06c5 96           1492: 		DB (GOTO / 16) + 128
06c6 60           1493: 		DB GOTO
06c7 47 4f 53 55  1494:         DB   'GOSUB'
     42 
                  1495:         ;DWA  GOSUB
06cc 9b           1496: 		DB (GOSUB / 16) + 128
06cd bf           1497: 		DB GOSUB
06ce 52 45 54 55  1498:         DB   'RETURN'
     52 4e 
                  1499:         ;DWA  RETURN
06d4 9d           1500: 		DB (RETURN / 16) + 128
06d5 df           1501: 		DB RETURN
06d6 52 45 4d     1502:         DB   'REM'
                  1503:         ;DWA  REM
06d9 ab           1504: 		DB (REM / 16) + 128
06da b0           1505: 		DB REM
06db 46 4f 52     1506:         DB   'FOR'
                  1507:         ;DWA  FOR
06de 9f           1508: 		DB (FOR / 16) + 128
06df f8           1509: 		DB FOR
06e0 49 4e 50 55  1510:         DB   'INPUT'
     54 
                  1511:         ;DWA  INPUT
06e5 ac           1512: 		DB (INPUT / 16) + 128
06e6 cd           1513: 		DB INPUT
06e7 50 52 49 4e  1514:         DB   'PRINT'
     54 
                  1515:         ;DWA  PRINT
06ec 98           1516: 		DB (PRINT / 16) + 128
06ed 87           1517: 		DB PRINT
06ee 53 54 4f 50  1518:         DB   'STOP'
                  1519:         ;DWA  STOP
06f2 93           1520: 		DB (STOP / 16) + 128
06f3 3b           1521: 		DB STOP
                  1522:         ;DWA  DEFLT
06f4 b1           1523: 		DB (DEFLT / 16) + 128
06f5 1d           1524: 		DB DEFLT
                  1525: ;
                  1526: TAB4:                                   ;FUNCTIONS
06f6 52 4e 44     1527:         DB   'RND'
                  1528:         ;DWA  RND
06f9 c2           1529: 		DB (RND / 16) + 128
06fa 25           1530: 		DB RND
06fb 41 42 53     1531:         DB   'ABS'
                  1532:         ;DWA  ABS
06fe c5           1533: 		DB (ABS / 16) + 128
06ff 50           1534: 		DB ABS
0700 53 49 5a 45  1535:         DB   'SIZE'
                  1536:         ;DWA  SIZE
0704 c5           1537: 		DB (SIZE / 16) + 128
0705 59           1538: 		DB SIZE
                  1539:         ;DWA  XP40
0706 c0           1540: 		DB (XP40 / 16) + 128
0707 0b           1541: 		DB XP40
                  1542: ;
                  1543: TAB5:                                   ;"TO" IN "FOR"
0708 54 4f        1544:         DB   'TO'
                  1545:         ;DWA  FR1
070a a0           1546: 		DB (FR1 / 16) + 128
070b 08           1547: 		DB FR1
                  1548:         ;DWA  QWHAT
070c cc           1549: 		DB (QWHAT / 16) + 128
070d c6           1550: 		DB QWHAT
                  1551: ;
                  1552: TAB6:                                   ;"STEP" IN "FOR"
070e 53 54 45 50  1553:         DB   'STEP'
                  1554:         ;DWA  FR2
0712 a1           1555: 		DB (FR2 / 16) + 128
0713 12           1556: 		DB FR2
                  1557:         ;DWA  FR3
0714 a1           1558: 		DB (FR3 / 16) + 128
0715 16           1559: 		DB FR3
                  1560: ;
                  1561: TAB8:                                   ;RELATION OPERATORS
0716 3e 3d        1562:         DB   '>='
                  1563:         ;DWA  XP11
0718 b3           1564: 		DB (XP11 / 16) + 128
0719 33           1565: 		DB XP11
071a 23           1566:         DB   '#'
                  1567:         ;DWA  XP12
071b b3           1568: 		DB (XP12 / 16) + 128
071c 39           1569: 		DB XP12
071d 3e           1570:         DB   '>'
                  1571:         ;DWA  XP13
071e b3           1572: 		DB (XP13 / 16) + 128
071f 3f           1573: 		DB XP13
0720 3d           1574:         DB   '='
                  1575:         ;DWA  XP15
0721 b4           1576: 		DB (XP15 / 16) + 128
0722 4e           1577: 		DB XP15
0723 3c 3d        1578:         DB   '<='
                  1579:         ;DWA  XP14
0725 b4           1580: 		DB (XP14 / 16) + 128
0726 46           1581: 		DB XP14
0727 3c           1582:         DB   '<'
                  1583:         ;DWA  XP16
0728 b5           1584: 		DB (XP16 / 16) + 128
0729 54           1585: 		DB XP16
                  1586:         ;DWA  XP17
072a b5           1587: 		DB (XP17 / 16) + 128
072b 5a           1588: 		DB XP17
                  1589: ;
072c 21 a1 06     1590: DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
                  1591: ;
                  1592: EXEC:                                   ;*** EXEC ***
072f ef           1593: EX0:    RST  5                          ;IGNORE LEADING BLANKS
0730 d5           1594:         PUSH D                          ;SAVE POINTER
0731 1a           1595: EX1:    LDAX D                          ;IF FOUND '.' IN STRING
0732 13           1596:         INX  D                          ;BEFORE ANY MISMATCH
0733 fe 2e        1597:         CPI  2EH                        ;WE DECLARE A MATCH
0735 ca 4e 07     1598:         JZ   EX3
0738 23           1599:         INX  H                          ;HL->TABLE
0739 be           1600:         CMP  M                          ;IF MATCH, TEST NEXT
073a ca 31 07     1601:         JZ   EX1
073d 3e 7f        1602:         MVI  A,07FH                     ;ELSE SEE IF BIT 7
073f 1b           1603:         DCX  D                          ;OF TABLE IS SET, WHICH
0740 be           1604:         CMP  M                          ;IS THE JUMP ADDR. (HI)
0741 da 55 07     1605:         JC   EX5                        ;C:YES, MATCHED
0744 23           1606: EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
0745 be           1607:         CMP  M
0746 d2 44 07     1608:         JNC  EX2
0749 23           1609:         INX  H                          ;BUMP TO NEXT TAB. ITEM
074a d1           1610:         POP  D                          ;RESTORE STRING POINTER
074b c3 2f 07     1611:         JMP  EX0                        ;TEST AGAINST NEXT ITEM
074e 3e 7f        1612: EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
0750 23           1613: EX4:    INX  H                          ;JUMP ADDR., WHICH IS
0751 be           1614:         CMP  M                          ;FLAGGED BY BIT 7
0752 d2 50 07     1615:         JNC  EX4
0755 7e           1616: EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
0756 23           1617:         INX  H                          ;ADDRESS FROM THE TABLE
0757 6e           1618:         MOV  L,M
0758 e6 7f        1619:         ANI  7FH                        ;MASK OFF BIT 7
075a 67           1620:         MOV  H,A
075b f1           1621:         POP  PSW                        ;CLEAN UP THE GABAGE
075c e9           1622:         PCHL                            ;AND WE GO DO IT
                  1623: ;
                  1624: LSTROM:                                 ;ALL ABOVE CAN BE ROM
                  1625: ;       ORG  1000H                      ;HERE DOWN MUST BE RAM
(2000)            1626:         ORG  02000H
2000 +0001        1627: OCSW:   DS   1                          ;SWITCH FOR OUTPUT
2001 +0002        1628: CURRNT: DS   2                          ;POINTS TO CURRENT LINE
2003 +0002        1629: STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
2005 +0002        1630: VARNXT: DS   2                          ;TEMP STORAGE
2007 +0002        1631: STKINP: DS   2                          ;SAVES SP IN 'INPUT'
2009 +0002        1632: LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
200b +0002        1633: LOPINC: DS   2                          ;INCREMENT
200d +0002        1634: LOPLMT: DS   2                          ;LIMIT
200f +0002        1635: LOPLN:  DS   2                          ;LINE NUMBER
2011 +0002        1636: LOPPT:  DS   2                          ;TEXT POINTER
2013 +0002        1637: RANPNT: DS   2                          ;RANDOM NUMBER POINTER
2015 +0002        1638: TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
2017 +0002        1639: TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
                  1640: ;       ORG  1366H
(3f87)            1641:         ORG  03F87H
3f87 +0000        1642: TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
3f87 +0037        1643: VARBGN: DS   55                         ;VARIABLE @(0)
3fbe +0040        1644: BUFFER: DS   64                         ;INPUT BUFFER
3ffe +0001        1645: BUFEND: DS   1                          ;BUFFER ENDS
(b800)            1646:         ORG  0B800H
b800 +0001        1647: STKLMT: DS   1                          ;TOP LIMIT FOR STACK
(c000)            1648:         ORG  0C000H
c000 +0000        1649: STACK:  DS   0                          ;STACK STARTS HERE
                  1650: ;
(000d)            1651: CR      EQU  0DH
(000a)            1652: LF      EQU  0AH
                  1653: 
                  1654:         ;END

1654 lines, 0 errors, 0 warnings


SYMBOL TABLE:

START           : 0000 (0)
CRLF            : 000e (14)
SS1             : 0028 (40)
TV1             : 0058 (88)
TC1             : 0068 (104)
TC2             : 0073 (115)
TSTNUM          : 0077 (119)
TN1             : 007c (124)
QHOW            : 009f (159)
AHOW            : 00a0 (160)
HOW             : 00a6 (166)
OK              : 00ab (171)
WHAT            : 00ae (174)
SORRY           : 00b4 (180)
RSTART          : 00ba (186)
ST1             : 00bd (189)
ST2             : 00cd (205)
ST3             : 00d6 (214)
ST4             : 010b (267)
NEW             : 0132 (306)
STOP            : 013b (315)
RUN             : 0141 (321)
RUNNXL          : 0147 (327)
RUNTSL          : 0150 (336)
RUNSML          : 0157 (343)
GOTO            : 0160 (352)
LIST            : 016f (367)
LS1             : 0178 (376)
PRINT           : 0187 (391)
PR2             : 0192 (402)
PR0             : 019b (411)
PR1             : 01a3 (419)
PR3             : 01a9 (425)
PR6             : 01b2 (434)
PR8             : 01b6 (438)
GOSUB           : 01bf (447)
RETURN          : 01df (479)
FOR             : 01f8 (504)
FR1             : 0208 (520)
FR2             : 0212 (530)
FR3             : 0216 (534)
FR4             : 0219 (537)
FR5             : 021c (540)
FR7             : 0231 (561)
FR8             : 0252 (594)
NEXT            : 0257 (599)
NX0             : 025e (606)
NX3             : 0276 (630)
NX4             : 0288 (648)
NX1             : 0298 (664)
NX5             : 02aa (682)
NX2             : 02ac (684)
REM             : 02b0 (688)
IFF             : 02b4 (692)
INPERR          : 02c3 (707)
INPUT           : 02cd (717)
IP1             : 02cd (717)
IP2             : 02db (731)
IP3             : 02eb (747)
IP4             : 0315 (789)
IP5             : 031c (796)
DEFLT           : 031d (797)
LET             : 0323 (803)
LT1             : 032c (812)
EXPR1           : 032d (813)
XP11            : 0333 (819)
XP12            : 0339 (825)
XP13            : 033f (831)
XP14            : 0346 (838)
XP15            : 034e (846)
XP16            : 0354 (852)
XP17            : 035a (858)
XP18            : 035c (860)
EXPR2           : 0371 (881)
XP21            : 037a (890)
XP22            : 037d (893)
XP23            : 0380 (896)
XP24            : 0387 (903)
XP25            : 0398 (920)
XP26            : 039b (923)
EXPR3           : 03a5 (933)
XP31            : 03a8 (936)
XP32            : 03c5 (965)
XP33            : 03cd (973)
XP34            : 03d8 (984)
XP35            : 03f7 (1015)
EXPR4           : 0405 (1029)
XP40            : 040b (1035)
XP41            : 0414 (1044)
PARN            : 041a (1050)
XP42            : 0421 (1057)
XP43            : 0422 (1058)
RND             : 0425 (1061)
RA1             : 0440 (1088)
ABS             : 0450 (1104)
SIZE            : 0459 (1113)
DIVIDE          : 0466 (1126)
DV1             : 0471 (1137)
DV2             : 0473 (1139)
SUBDE           : 047c (1148)
CHKSGN          : 0483 (1155)
CHGSGN          : 0486 (1158)
CKHLDE          : 0498 (1176)
CK1             : 049e (1182)
SETVAL          : 04a0 (1184)
SV1             : 04b0 (1200)
FIN             : 04b3 (1203)
FI1             : 04ba (1210)
FI2             : 04c1 (1217)
ENDCHK          : 04c2 (1218)
QWHAT           : 04c6 (1222)
AWHAT           : 04c7 (1223)
ERROR           : 04ca (1226)
QSORRY          : 04f3 (1267)
ASORRY          : 04f4 (1268)
GETLN           : 04fa (1274)
GL1             : 04fe (1278)
GL3             : 0523 (1315)
GL4             : 0530 (1328)
FNDLN           : 0538 (1336)
FNDLP           : 0540 (1344)
FL1             : 0540 (1344)
FNDNXT          : 0554 (1364)
FL2             : 0555 (1365)
FNDSKP          : 0556 (1366)
PRTSTG          : 0560 (1376)
PS1             : 0561 (1377)
QTSTG           : 056c (1388)
QT1             : 0571 (1393)
QT2             : 057a (1402)
QT3             : 057e (1406)
QT4             : 0586 (1414)
QT5             : 0591 (1425)
PRTNUM          : 0592 (1426)
PN1             : 059d (1437)
PN2             : 05a4 (1444)
PN3             : 05b4 (1460)
PN4             : 05b5 (1461)
PN5             : 05c1 (1473)
PN6             : 05c7 (1479)
PRTLN           : 05d2 (1490)
MVUP            : 05e5 (1509)
MVDOWN          : 05ee (1518)
MD1             : 05f6 (1526)
POPA            : 05fd (1533)
PP1             : 0617 (1559)
PUSHA           : 0619 (1561)
PU1             : 063f (1599)
CONIN_ADDR      : f828 (63528)
CONOUT_ADDR     : f830 (63536)
CONSTAT_ADDR    : f820 (63520)
INIT            : 0642 (1602)
PATLOP          : 0647 (1607)
OC2             : 0664 (1636)
OC3             : 0669 (1641)
CHKIO           : 0676 (1654)
CHKIO_CNT       : 067d (1661)
CI1             : 0691 (1681)
MSG1            : 0697 (1687)
TAB1            : 06a2 (1698)
TAB2            : 06b2 (1714)
TAB4            : 06f6 (1782)
TAB5            : 0708 (1800)
TAB6            : 070e (1806)
TAB8            : 0716 (1814)
DIRECT          : 072c (1836)
EXEC            : 072f (1839)
EX0             : 072f (1839)
EX1             : 0731 (1841)
EX2             : 0744 (1860)
EX3             : 074e (1870)
EX4             : 0750 (1872)
EX5             : 0755 (1877)
LSTROM          : 075d (1885)
OCSW            : 2000 (8192)
CURRNT          : 2001 (8193)
STKGOS          : 2003 (8195)
VARNXT          : 2005 (8197)
STKINP          : 2007 (8199)
LOPVAR          : 2009 (8201)
LOPINC          : 200b (8203)
LOPLMT          : 200d (8205)
LOPLN           : 200f (8207)
LOPPT           : 2011 (8209)
RANPNT          : 2013 (8211)
TXTUNF          : 2015 (8213)
TXTBGN          : 2017 (8215)
TXTEND          : 3f87 (16263)
VARBGN          : 3f87 (16263)
BUFFER          : 3fbe (16318)
BUFEND          : 3ffe (16382)
STKLMT          : b800 (47104)
STACK           : c000 (49152)
CR              : 000d (13)
LF              : 000a (10)


Total memory is 1885 bytes
