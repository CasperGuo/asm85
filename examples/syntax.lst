asm85 8085 Assembler by nib

                     1: ; The assembler runs two passes over the source file.  The first pass builds
                     2: ; the symbol table and the second emits the hex file and list file.
                     3: ;
                     4: ; Note that the assembler is case-insensitive for instructions, directives,
                     5: ; register names, and labels.  The labels "label2" and "LABEL2" are the same,
                     6: ; and an error would be thrown if both were defined.
                     7:  
                     8: ; Column one must contain whitespace or a label. Labels can be up to 32
                     9: ; characters and must start with an alpha.  The underscore character is
                    10: ; permitted in a label.
                    11:  
                    12: ; The EQU directive is used to define a constant value.  It does not emit
                    13: ; any code.
(0000)              14: RAMST   equ     00000h          
(c000)              15: ROMST   equ     0c000h         
                    16: 
                    17: ; Constants can be decimal, hex, or binary.  Binary is indicated with a
                    18: ; trailing 'b' and hex with a trailing 'h' character.  All constants must
                    19: ; start with a numeric character, so hex values starting with A-F must have
                    20: ; a leading zero.
(0037)              21: num1	equ	55              ; Decimal constant
(0055)              22: num2	EQU	55h             ; Hex
(00a6)              23: num3    equ     0a6h            ; Hex with leading zero
(1234)              24: num4    equ     1234H           ; Hex without leading zero
(0006)              25: num5	equ	0110b		; Binary
(0cab)              26: CAB     equ     0CABh           ; Note label 'CAB' and constant '0CABh'
                    27: 
                    28: ; The ORG directive sets the current address for assembly.  A file can
                    29: ; contain more than one ORG.  The assembler does not detect overlapping
                    30: ; ORG directives and will silently overwrite output in that case.
(2000)              31:         org     RAMST + 02000h
                    32: 
                    33: ; The DB directive places one or more bytes of data in the output.
2000 05             34: d1:     db      5               ; single byte
2001 12 34 56 78    35: d2:     db	12h,34h,56h,78h ; multiple bytes
2005 05 2a 0b       36: d3:     db      5, 02Ah, 1011B  ; Mixed decimal, hex, and binary
                    37: 
                    38: ; The DB directive can also be used with strings.  Each octet in the string
                    39: ; generates one octet of output.  Strings and numeric constants can be mixed
                    40: ; in a single directive.
2008 54             41: str1:   db      'T'             ; Single character constant
2009 57 65 6c 63    42: str2:   DB	"Welcome"       ; String constant
     6f 6d 65 
2010 72 65 64 67    43: str3:   db	"red","green"   ; Multiple strings
     72 65 65 6e
2018 03 72 65 64    44: str4:   db      3,"red",4,"blue"; Mixed strings and numerics
     04 62 6c 75
     65 
                    45: 
                    46: ; Note that a single character string can also be used anywhere a numeric
                    47: ; would be allowed.  It evaluates to the ASCII value of the single character.
2021 0e 41          48:         mvi     c, 65           ; Move the letter 'A' into register C.
2023 0e 00          49:         mvi     c, 0x41         ; Move the letter 'A' into register C.
2025 0e 41          50:         mvi	c, 'A'          ; Move the letter 'A' into register C.
                    51: 
                    52: ; Some common C-style string escapes are supported: CR, LF, tab, NULL, and
                    53: ; hex value.  Hex escapes can use upper or lower case and must be 2 digits.
2027 0d 0a 09 2a    54: 	db	"\r\n\t\x2a\x2B\0"
     2b 00 
                    55: 
                    56: ; The backslash can also be used to escape quotes or the backslash character
                    57: ; itself.  Embedded quotes can also be handled by placing double quotes
                    58: ; inside single quotes or single quotes inside double quotes.
202d 5c             59: 	db	'\\'			; Backslash character.
202e 27             60: 	db	'\''			; Single quote character.
202f 27             61: 	db	"'"			; Same string using double quotes.
2030 41 20 22 71    62: 	db	"A \"quoted\" string"	; Quotes within quotes.
     75 6f 74 65
     64 22 20 73
     74 72 69 6e
     67 
2041 41 20 22 71    63: 	db	'A "quoted" string'	; Same string using single quotes.
     75 6f 74 65
     64 22 20 73
     74 72 69 6e
     67 
2052 54 68 69 73    64:         db      "This isn't bad"        ; Single quote in double quotes.
     20 69 73 6e
     27 74 20 62
     61 64 
                    65: 	
                    66: ; The following DBs are all equivalent	
(000d)              67: CR	equ	13
(000a)              68: LF	equ	'\n'
2060 41 42 43 31    69: 	db	"ABC123\r\n"
     32 33 0d 0a
2068 41 42 43 31    70: 	db	"ABC123",CR,LF
     32 33 0d 0a
2070 41 42 43 31    71: 	db	"ABC123",13,10
     32 33 0d 0a
2078 41 42 43 31    72: 	db	'A','B','C','1','2','3','\r','\n'
     32 33 0d 0a
2080 41 42 43 31    73: 	db	"ABC",31h,32h,"3",'\r',LF
     32 33 0d 0a
                    74: 
                    75: ; The DW directive stores one or more 16 bit values.
2088 03 02          76: words1: dw      0203h           ; One word value
208a 34 12          77: words2: dw      num4            ; One word value
208c 02 00 03 00    78: words3: dw      02h, 03h        ; Two word values
2090 02 00 03 00    79: words4: dw      02h, 03, 04ffh  ; Three word values
     ff 04 
                    80: 
                    81: ; Note that DW stores the two octet values in intel (little endian) order, so
                    82: ; the following two declarations are equivalent:
2096 34 12          83:         dw      01234h
2098 34 12          84:         db      034h, 012h
                    85: 
                    86: ; The DS directive reserves space, but does not generate any output.  It
                    87: ; simply advances the target address for the next code or data.
(0020)              88: StrSize equ     32
209a +0080          89: buffer: ds	StrSize * 4     ; Reserve space for 4 strings
                    90: 
                    91: ; Expressions can be used in place of any numeric constant.
211a 00 0c          92: t:        dw      1024 * 3
211c 31 82 00       93:         LXI	SP, 32 * 4 + 2
211f 21 1d 20       94:         lxi     h, str4 + 5
2122 11 ba 20       95:         lxi     d, buffer + StrSize
2125 39             96: 	db	7+7*7+7/(7+7-7)
2126 0e 61          97:         mvi	c, 'A' | 020H
2128 0e 41          98:         mvi     c, 'a' & 11011111b
                    99: 
                   100: ; The $ symbol is used in an expression to represent the current address.
                   101: ; This is useful for calculating the size of objects
212a 48 65 6c 6c   102: hello:  db	"Hello, world"
     6f 2c 20 77
     6f 72 6c 64
(000c)             103: strLen  equ     $ - hello       ; Length of the string
                   104: 
                   105: jump_tab:                       ; Jump table.  Each entry is 3 octets.
2136 61            106:         db      'a'             ; ADD command
2137 00 01         107:         dw      0100h           ; Handler address
2139 65            108:         db      'e'             ; EXAMINE command
213a 42 01         109:         dw      0142h
213c 70            110:         db      'p'             ; PRINT command
213d 20 02         111:         dw      0220h
213f 73            112:         db      's'             ; STEP command
2140 34 03         113:         dw      0334h
2142 78            114:         db      'x'             ; EXIT command
2143 34 04         115:         dw      0434h
(0005)             116: entries equ     ($-jump_tab) / 3 ; Number of entries in the table
                   117: 
                   118: 
                   119: 
                   120: 
                   121: 

121 lines, 0 errors, 0 warnings


SYMBOL TABLE:

RAMST           : 0000 (0)
ROMST           : c000 (49152)
num1            : 0037 (55)
num2            : 0055 (85)
num3            : 00a6 (166)
num4            : 1234 (4660)
num5            : 0006 (6)
CAB             : 0cab (3243)
d1              : 2000 (8192)
d2              : 2001 (8193)
d3              : 2005 (8197)
str1            : 2008 (8200)
str2            : 2009 (8201)
str3            : 2010 (8208)
str4            : 2018 (8216)
CR              : 000d (13)
LF              : 000a (10)
words1          : 2088 (8328)
words2          : 208a (8330)
words3          : 208c (8332)
words4          : 2090 (8336)
StrSize         : 0020 (32)
buffer          : 209a (8346)
t               : 211a (8474)
hello           : 212a (8490)
strLen          : 000c (12)
jump_tab        : 2136 (8502)
entries         : 0005 (5)


Total memory is 197 bytes
